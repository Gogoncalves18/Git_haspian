<GerenciadorTela>: #Como meu gerenciador tela ira comandar tudo, ele é a 
                #primeira classe que devo chamar no .KV
    Menu:
        name: 'menu'
    Tarefas: #Como tarefas é uma screen, esta funcao não possui IDS como 
            #o box layout, ela usa "name" que é o mesmo que ID
        name: 'tarefas'

<Menu>: # Chamo uma tela Menu que é classe mas é uma classe do kivy
    BoxLayout:
        orientation: 'vertical'
        padding: [20,10,20,50] # Espaco entre os 4 lados do boxlayout, posso usar os 
                #valores assim tambem '20,20,10,10'
        spacing: '10dp' # Separacao entre widgets
        canvas:
            Color:
                rgba:54/255,80/255,137/255,1 
            Rectangle:
                size:self.size
                pos:self.pos  
        #^Aqui é o segredo, podemos dar o tamanho atraves '50,100'
        #ou podemos dizer que ele tera o tamanho do widget atraves do 'self.'
        #pos: self.pos # Mesma coisa que o tamanho, definimos uma posicao x,y ou
        #self. para assumir a posicao do widget. O Canvas não esta aceitando 
        #comentarios dentro dele. Lembrando que este canvas é do widget boxlayout
        #Outra coisa importante é que posso carregar uma imagem no canvas dentro
        #do 'Rectangle', usando a propriedade 'source:caminho da imagem'. Mas neste
        #caso é necessário alterar o 'rgba' tudo para 1 pois ele funciona como um filtro
        #para os pixels
        
        Image: # Comando para carregar imagem, ela é um widget
            source: 'logo.png' # Determina o local da imagem, se tiver em uma 
                    #sub-pasta dento da pasta main.py e .kv, é só colocar 
                    #sub-pasta/logo.png
            size_hint_y: None #definir o tamanho da imagem
            height: '200dp' # Se ela for pequena ela aumentará somente até
                            #seu tamanho original
            allow_stretch: True # Este recurso permite esticar a imagem, mesmo
                        #que destorça
            #pos_hint: None, None
            #pos_hint: {"center_x":0.5,"center_y":0.5}

        BotaoPerson:
            text: 'Assistente'
            size_hint_y: None
            height: '50dp'

        BotaoPerson2: # Adiciono um botao que me levará a outra tela
            text: 'Ver Tarefas'
            size_hint_y: None
            height: '50dp'
            #cor: 0.1,0.1,0.1,1
            #on_release: app.root.current = 'tarefas' # "on_release" é um callback para
                        #chamar algo, o "app.root" apontara para o meu "GerenciadorTela"
                        #e ".current = " aponto para o nome da tela que quero ir
        
        Button:
            text: 'Sair'
            size_hint_y: None
            height: '50dp'
            background_color: 0.28,0.4,0.69,1
            on_release: app.stop() # Este comando fecha o app


<Tarefas>: #Como uso um gerenciador acima, não preciso endentar
    BoxLayout: #Como adicionei um gerenciador de telas acima do tarefas, o Tarefas
                #deixou de ser um boxlayout, portanto adicionei um novo boxlayout 
                #e endentei tudo dentro dele para continuar usando o recurso
        orientation: 'vertical' # Orientacao para posicionar a tela das tarefas 
                    #com a entrada de texto, necessario desligar controle de altura
                    #para nao ocupar metade da tela
        ActionBar: # 'ActionBar' é um widget para colocar itens na barra superior
                    #de um app, estes itens entram na 'actionview'
            ActionView: # Para receber os itens da actionbar
                ActionPrevious: # Botao para voltar para o menu anterior
                    title: 'Tarefas/Voltar' # Nome do botao de volta
                    on_release: app.root.current = 'menu' # Ao apertar o botao 
                                #'Tarefas/Voltar', 'app.root' irá me levar para 
                                #o 'gerenciadorTela' e dele com '.current =' eu
                                #aponto para a tela 'Menu' que é filha
                ActionButton: # É um tipo de button do 'ActionButton'
                    text: 'Menu'
                ActionSeparator: # Cria uma barra separadora entre os botoes
                ActionButton: 
                    text: 'Sair'
                    on_release: app.stop()
        ScrollView: #Recurso para fazer a rolagem dentro do "id: box"
            BoxLayout:
                id: box #O id possibilitará chamar as propriedades deste widget dentro do main ou entre widgets
                orientation: 'vertical'
                size_hint_y: None #Esta propriedade desliga o recurso de definição de tamanho em Y
                height: self.minimum_height #Para o boxlayout ir aumentando a altura conforme vou inserindo
                                            #infos nele, 2 widgets de 200 de heigth irá transformar meu box
                                            #em 400 de heigth, esta é um propriedade de height, por isto do self

        BoxLayout: #Aqui coloco um novo widget para inserir texto nas tarefas
            size_hint_y: None
            height: 40
            TextInput: # "TextInput" recebe entrada de texto
                id: text_in # Identificacao da tela de entrada
            Button:
                text: '+'
                size_hint_x: None
                width: 30
                on_release: root.addinfo() # Funcao de main.py que acessa a class
                            #Tarefa atraves do "root."

<BotaoPerson@ButtonBehavior+Label>: #Criacao de uma classe de botao dentro do .kv, neste 
    #caso o primeiro nome antes do @ é o nome da classe nova, após o @, o .KV entende
    #como as classes que vamos  herdar para nossa classe BotaoPerson. 'ButtonBehavior' é
    #uma classe que lê apenas os eventos de um botao. 'Label' é outra classe herdada para
    #aceitar um texto, podemos herdar quantas classes quiser adicionando o sinal '+'
    canvas.before:
        Color:
            rgba:0.28,0.4,0.69,1
        Ellipse:
            pos:self.pos
            size: self.height, self.height
        Ellipse:
            pos:self.x + self.width - self.height, self.y
            size:self.height, self.height
        Rectangle:
            pos:self.x + (self.height/2), self.y
            size:self.width - self.height, self.height
        # Neste caso, o uso da propriedade 'Ellipse' é para desenhar uma circulo, como
        #vamos usar ela dentro do botao "Assistente" na classe 'Menu' para mostrar o
        #como reaproveitar o canvas, para não ter que criar varios canvas. Como lá dentro
        #do 'Menu' eu tenho um botao com altura definida, no 'size' da 'Ellipse' eu uso
        #o self.height tanto para a altura e largura, assim teremos um circulo ao inves 
        #de uma elipse
        # Para desenhar um botao com borda redonda, foi necessário desenhar dois circulos 
        #com elipse e um retangulo, todas as medidas foi utilizado o self. do widget que
        #estamos desenhando
    

<Tarefa>: #Classe fornecida pela main
    size_hint_y: None #Desligamos o tamanho em Y para não ficar tudo sobreposto
    height: 60 #Distribuicao das infos e do botao em alturas de 60 pixel
    Label:
        id: label_task #Aqui recebo o texto da classe Tarefa do main.py
        font_size: 30 #Definicao do tamanho do texto
    Button:
        text: 'X' #Defino um tamanho de botao, sem nada de definicao de tam
                    #anho, ele ocupara metade da tela em x
        size_hint_x: None
        width: 30
        on_release: app.root.get_screen('tarefas').ids.box.remove_widget(root) # Recurso "on_release" monitora o soltar do botao, atraves dele
                    #disparo as açoes. Como queremos que ele remova a tarefa, neste 
                    #momento de remocao preciso apontar para o "id: box" que é quem
                    #recebe as tarefas pela "class Tarefas" de main.py. Porém fizemos
                    #uma modificação, colocamos uma screen na widget, sendo assim preciso
                    #primeiro acessar o screen para chegar no boxlayout, assim uso a 
                    #funcao "get_screen('nome da screen')" para chegar nela e depois
                    #sigo normalmente.
            # O root é o widget pai que estou, isto é, o "<Tarefa>", entao para 
            #acessar o "id: box", precisamos acessar "app.root" que apontará para
            #o Widget pai que é a "class Tarefas", assim consigo chegar em ids.box
            #e usar o comando "remove_widget()" para remover a tarefa que é um objeto
            #que ao passar o paramentro "root" dentro do remove, para remover o widget
            #<Tarefa> todo.
                
