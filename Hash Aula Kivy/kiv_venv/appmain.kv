#.KV precisa ter o mesmo nome que o app que esta sendo construido no main
<GerenciadorTela>: #Como meu gerenciador tela ira comandar tudo, ele é a 
                #primeira classe que devo chamar no .KV
    Menu: # Chamo uma tela Menu que é classe mas é uma classe do kivy
        BoxLayout:
            orientation: 'vertical'
            padding: [20,10,20,50] # Espaco entre os 4 lados do boxlayout, posso usar os 
                    #valores assim tambem '20,20,10,10'
            spacing: '10dp' # Separacao entre widgets
            
            Image: # Comando para carregar imagem, ela é um widget
                source: 'logo.png' # Determina o local da imagem, se tiver em uma 
                        #sub-pasta dento da pasta main.py e .kv, é só colocar 
                        #sub-pasta/logo.png
                size_hint_y: None #definir o tamanho da imagem
                height: '200dp' # Se ela for pequena ela aumentará somente até
                                #seu tamanho original
                allow_stretch: True # Este recurso permite esticar a imagem, mesmo
                            #que destorça
                #pos_hint: {center_y:0.5}

            Button:
                text: 'Assistente'
                size_hint_y: None
                height: '50dp'

            Button: # Adiciono um botao que me levará a outra tela
                text: 'Ver Tarefas'
                size_hint_y: None
                height: '50dp'
                on_release: root.current = 'tarefas' # "on_release" é um callback para
                            #chamar algo, o "root" apontara para o meu "GerenciadorTela"
                            #e ".current = " aponto para o nome da tela que quero ir
            
            Button:
                text: 'Sair'
                size_hint_y: None
                height: '50dp'
                on_release: app.stop() # Este comando fecha o app

    Tarefas: #Aqui chamo a sequencia de telas que meu gerenciador irá
            #trabalhar

<Tarefas>: #Como uso um gerenciador acima, não preciso endentar
    name: 'tarefas' #Como tarefas é uma screen, esta funcao não possui IDS como 
                    #o box layout, ela usa "name" que é o mesmo que ID
    BoxLayout: #Como adicionei um gerenciador de telas acima do tarefas, o Tarefas
                #deixou de ser um boxlayout, portanto adicionei um novo boxlayout 
                #e endentei tudo dentro dele para continuar usando o recurso
        orientation: 'vertical' # Orientacao para posicionar a tela das tarefas 
                    #com a entrada de texto, necessario desligar controle de altura
                    #para nao ocupar metade da tela
        ScrollView: #Recurso para fazer a rolagem dentro do "id: box"
            BoxLayout:
                id: box #O id possibilitará chamar as propriedades deste widget dentro do main ou entre widgets
                orientation: 'vertical'
                size_hint_y: None #Esta propriedade desliga o recurso de definição de tamanho em Y
                height: self.minimum_height #Para o boxlayout ir aumentando a altura conforme vou inserindo
                                            #infos nele, 2 widgets de 200 de heigth irá transformar meu box
                                            #em 400 de heigth, esta é um propriedade de height, por isto do self

        BoxLayout: #Aqui coloco um novo widget para inserir texto nas tarefas
            size_hint_y: None
            height: 40
            TextInput: # "TextInput" recebe entrada de texto
                id: text_in # Identificacao da tela de entrada
            Button:
                text: '+'
                size_hint_x: None
                width: 30
                on_release: root.addinfo() # Funcao de main.py que acessa a class
                            #Tarefa atraves do "root."

<Tarefa>: #Classe fornecida pela main
    size_hint_y: None #Desligamos o tamanho em Y para não ficar tudo sobreposto
    height: 60 #Distribuicao das infos e do botao em alturas de 60 pixel
    Label:
        id: label_task #Aqui recebo o texto da classe Tarefa do main.py
        font_size: 30 #Definicao do tamanho do texto
    Button:
        text: 'X' #Defino um tamanho de botao, sem nada de definicao de tam
                    #anho, ele ocupara metade da tela em x
        size_hint_x: None
        width: 30
        on_release: app.root.get_screen('tarefas').ids.box.remove_widget(root) # Recurso "on_release" monitora o soltar do botao, atraves dele
                    #disparo as açoes. Como queremos que ele remova a tarefa, neste 
                    #momento de remocao preciso apontar para o "id: box" que é quem
                    #recebe as tarefas pela "class Tarefas" de main.py. Porém fizemos
                    #uma modificação, colocamos uma screen na widget, sendo assim preciso
                    #primeiro acessar o screen para chegar no boxlayout, assim uso a 
                    #funcao "get_screen('nome da screen')" para chegar nela e depois
                    #sigo normalmente.
            # O root é o widget pai que estou, isto é, o "<Tarefa>", entao para 
            #acessar o "id: box", precisamos acessar "app.root" que apontará para
            #o Widget pai que é a "class Tarefas", assim consigo chegar em ids.box
            #e usar o comando "remove_widget()" para remover a tarefa que é um objeto
            #que ao passar o paramentro "root" dentro do remove, para remover o widget
            #<Tarefa> todo.
                
